version: '3'
services:

  ### NGINX REVERSE PROXY
  nginx:
    image: nginx
    container_name: nginx
    volumes:
      - "./compose/nginx/templates:/etc/nginx/templates"
      - "./compose/nginx/snippets:/etc/nginx/snippets"
    tty: true
    ports:
      - "9999:80"
      - "8443:443"
    environment:
      - NGINX_PORT=80
      - NGINX_SSL_PORT=443
    networks:
      - proxy
    depends_on:
      - front
      - api
      - pgadmin

  install:
    build: .
    image: polypong/apps
    container_name: install
    volumes:
      - "./:/polypong"
      - "/polypong/apps/api/node_modules"
      - "/polypong/apps/front/node_modules"
      - "/polypong/node_modules"
      - "/polypong/.pnpm-store"
    tty: true
    working_dir: /polypong
    entrypoint: pnpm install --recursive

  front:
    build: .
    image: polypong/apps
    depends_on:
      - install
        # condition: service_completed_successfully
    container_name: front
    stop_signal: SIGINT
    expose:
      - 9000
    ports:
      - "9000:9000"
    volumes_from:
      - install
    networks:
      - proxy
    env_file:
      - .env
    tty: true
    working_dir: /polypong/apps/front
    entrypoint: pnpm start
    stop_signal: SIGINT

  api:
    build: .
    image: polypong/apps
    container_name: api
    networks:
      - proxy
    depends_on:
      install:
        condition: service_completed_successfully
      db:
        condition: service_healthy
    volumes_from:
      - install
    expose:
      - 3000
    ports:
      - 3000:3000
    env_file:
      - .env
    working_dir: /polypong/apps/api
    entrypoint: pnpm start
    tty: true
    networks:
      - database
      - proxy
      - mailer
    stop_signal: SIGINT

  db:
    container_name: postgres
    image: postgres
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: polypong
      POSTGRES_HOST: ${POSTGRES_HOST}
    expose:
      - 5432
    networks:
      - database
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 10s
      timeout: 5s
      retries: 5
    stop_signal: SIGINT
    volumes: [ 'database:/var/lib/postgresql/data' ]

  mailhog:
    depends_on:
      - db
      - pgadmin
      - backend
      - frontend
    networks:
      - mailer
    image: mailhog/mailhog
    container_name: mailhog
    restart: always
    stop_signal: SIGINT
    expose:
      - 1025

networks:
  database:
  proxy:
  mailer:

volumes:
  database:
