version: '3'
services:

  ### Nginx reverse proxy
  # Also, allow us to fake a same origin API/FRONT, to be closer of production environment
  nginx:
    image: nginx
    container_name: nginx
    volumes:
      - "./compose/nginx/templates:/etc/nginx/templates"
      - "./compose/nginx/snippets:/etc/nginx/snippets"
    ports:
      - "${PORT:-9999}:80"
      - "${SSL_PORT:-9998}:443"
    environment:
      - NGINX_PORT=80
      - NGINX_SSL_PORT=443
    networks:
      - proxy
    depends_on:
      - front
      - api
      - pgadmin

  # Front end server for development, should not exist in production version
  # Built on top of Quasar
  front:
    build:
      context: apps/front
    image: polypong/front
    container_name: front
    expose:
      - 9000
    ports:
      - "9000:9000"
    volumes:
      - ./apps/front:/app/
      - "/app/node_modules"
    networks:
      - proxy
    env_file:
      - .env
    working_dir: /app
    entrypoint: yarn start
    stop_signal: SIGINT

  # Api, built on top of NestJS
  api:
    build:
      context: apps/api
    image: polypong/api
    container_name: api
    volumes:
      - ./apps/api:/app/
      - "/app/node_modules"
      - "/avatars"
    expose:
      - 3000
    env_file:
      - .env
    working_dir: /app
    entrypoint: yarn start
    networks:
      - database
      - redis
      - proxy
      - mailer
    depends_on:
      postgres:
        condition: service_healthy
    stop_signal: SIGINT

  # Cold data (user infos, accounts etc) database
  postgres:
    container_name: database
    image: postgres
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: polypong
      POSTGRES_HOST: ${POSTGRES_HOST}
    expose:
      - 5432
    networks:
      - database
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 10s
      timeout: 5s
      retries: 5
    stop_signal: SIGINT
    volumes: [ 'database:/var/lib/postgresql/data' ]

  # Hot data (passport session, pong game state, caching) database
  redis:
    container_name: redis
    image: redis
    restart: always
    expose:
      - 6379
    networks:
      - redis
    volumes: [ 'redis:/data' ]
    stop_signal: SIGINT

  # Smtp with UI, to see all emails sent across our stack
  mailhog:
    image: mailhog/mailhog
    networks:
      - mailer
    expose:
      - 1025
    container_name: mailhog
    restart: always
    stop_signal: SIGINT

networks:
  database:
  proxy:
  mailer:
  redis:

volumes:
  database:
  redis:
